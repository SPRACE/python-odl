{% extends "base.phtml" %}
{% block body %}
    <nav>
        <ul class="list-unstyled main-menu">
          <!--Include your navigation here-->
          <li><a href="#">Menu One <span class="icon"></span></a></li>
          <li><a href="#">Menu Two <span class="icon"></span></a></li>
          <li><a href="#">Menu Three <span class="icon"></span></a></li>
          <li><a href="#">Dropdown</a>
            <ul class="list-unstyled">
                <li class="sub-nav"><a href="#">Sub Menu One <span class="icon"></span></a></li>
                <li class="sub-nav"><a href="#">Sub Menu Two <span class="icon"></span></a></li>
                <li class="sub-nav"><a href="#">Sub Menu Three <span class="icon"></span></a></li>
                <li class="sub-nav"><a href="#">Sub Menu Four <span class="icon"></span></a></li>
                <li class="sub-nav"><a href="#">Sub Menu Five <span class="icon"></span></a></li>
            </ul>
          </li>
          <li><a href="#">Menu Four <span class="icon"></span></a></li>
          <li><a href="#">Menu Five <span class="icon"></span></a></li>
        </ul>
      </nav>

    <div class="container">
      <div class="row">
        <div class="col-md-8">
          <div id="graph"></div>
        </div>
      </div>
      <hr>
    </div> <!-- /container -->

<script>
var nodes = {};

d3.json("{{ url_for('static', filename='data/full.json') }}", function(links) {
  // Compute the distinct nodes from the links.
  links.forEach(function(link) {
    link.source = nodes[link.source] || (nodes[link.source] = {name: link.source});
    link.target = nodes[link.target] || (nodes[link.target] = {name: link.target});
  });


var width = $("#graph").parent().width(),
    height = 500;

var force = d3.layout.force()
    .nodes(d3.values(nodes))
    .links(links)
    .size([width, height])
    .linkDistance(60)
    .charge(-300)
    .on("tick", tick)
    .start();

var svg = d3.select("#graph").append("svg")
    .attr("width", width)
    .attr("height", height);

var link = svg.selectAll(".link")
    .data(force.links())
  .enter().append("line")
    .attr("class", "link");

var node = svg.selectAll(".node")
    .data(force.nodes())
  .enter().append("g")
    .attr("class", "node")
    .on("mouseover", mouseover)
    .on("mouseout", mouseout)
    .call(force.drag);

node.append("circle")
    .attr("r", 8);

node.append("text")
    .attr("x", 12)
    .attr("dy", ".35em")
    .text(function(d) { return d.name; });

function tick() {
  link
      .attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });

  node
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
}

function mouseover() {
  d3.select(this).select("circle").transition()
      .duration(750)
      .attr("r", 16);

  $('body').toggleClass('nav-expanded');
}

function mouseout() {
  d3.select(this).select("circle").transition()
      .duration(750)
      .attr("r", 8);

  $('body').removeClass('nav-expanded');

}

});
</script>
{% endblock %}
